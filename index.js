"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var bluebird=_interopDefault(require("bluebird")),fancyLog=_interopDefault(require("fancy-log")),chalk=_interopDefault(require("chalk")),lodash=_interopDefault(require("lodash")),path=_interopDefault(require("path")),fs$1=_interopDefault(require("fs")),axios=_interopDefault(require("axios")),inquirer$1=_interopDefault(require("inquirer")),mkdirp=_interopDefault(require("mkdirp")),glob=_interopDefault(require("glob")),chokidar=_interopDefault(require("chokidar")),anymatch=_interopDefault(require("anymatch")),boxen=_interopDefault(require("boxen")),commonjsGlobal="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},Log=function(e,t="white",a=""){if(lodash.isObject(e)){if(e.message&&(a+=e.message+"\n\n\t"),e.data){const{data:t}=e;t.asset?a+=JSON.stringify(lodash.omit(t.asset,"attachment")):a+=JSON.stringify(t)}}else a=e;fancyLog(chalk[t](a))};const url=({api_key:e,password:t,domain:a})=>`https://${e}:${t}@${a}.myshopify.com`,queues={};class Queue{constructor(){this.isProcessing=!1,this.inFlight=0,this.rate=0,this.max=40,this.list=[]}async add(e,t){await new bluebird((a,s)=>{this.list.push({target:e,request:t,resolve:a,reject:s}),!this.isProcessing&&this.process()})}async process(){for(this.isProcessing=!0;this.list.length>0;){const e=this.list.shift();let t=this.max-(this.rate+this.inFlight);t<=0&&(t=0);let a=t*t;a<=.9&&(a=.9);const s=500/a;await bluebird.delay(s),this.request(e)}this.isProcessing=!1}async request({target:e,request:t,reject:a,resolve:s},r=null){this.inFlight+=1;try{const i=Object.assign({},t,{url:`${url(e)}${t.url}`});r=await axios(i)}catch(r){if("Too Many Requests"===r.statusText)return Log("Exceeded Shopify API limit, will retry...","yellow"),this.list.unshift({target:e,request:t,resolve:s,reject:a});{const{message:e,data:s}=this.handleErrors(t,r);return a({message:e,data:s})}}if(this.inFlight-=1,await s(r.data),r.data.errors)return a(r.data.errors);{let e;e=(e=r.headers["x-shopify-shop-api-call-limit"]).split("/"),this.rate=parseInt(e[0],10),this.max=parseInt(e[1],10)}}handleErrors(e,t){let a="",s="";if(!lodash.has(t.response,"data"))return{data:t.stack,message:t.name};const r=t.response.data;return r.errors?r.errors.asset?(s=e.data.asset.key,a=r.errors.asset):(a=r.errors,e.data&&(s=e.data.asset?`${e.data.asset.key} was not uploaded`:`${e.method.toUpperCase()} ${e.url}`)):(s=`FAILED! ${t}`,a=t.statusText),{message:s,data:a}}}async function Request(e,t){let a;queues[e.domain]?a=queues[e.domain]:(a=new Queue,queues[e.domain]=a),await a.add(e,t)}var Request_1={Request:Request,url:url};const fs=bluebird.promisifyAll(fs$1);var Config=async function(){let e;try{const t=process.cwd(),a=path.join(t,".shopifysync");e=await fs.readFileAsync(a,"utf8")}catch(e){throw new Error("The '.shopifysync' configuration is missing!")}try{e=JSON.parse(e)}catch(e){throw new Error("Your '.shopifysync' file is corrupt. JSON failed to parse")}return e};const inquirer=bluebird.promisifyAll(inquirer$1);var Target=async function(e,t,a=null){const s=t.target||null;if(console.log(s),!lodash.isArray(e.targets))throw new Error("No targets defined in the '.shopifysync' file");if(s){if(!(a=lodash.find(e.targets,{target_name:s})))throw new Error(`Could not find target '${targetName}'`)}else{const t=lodash.map(e.targets,e=>`[${e.target_name}] - '${e.theme_name}' at ${e.domain}.myshopify.com`);if(e.targets.length>1){const s=await inquirer.prompt([{type:"list",name:"target",message:"Select target",default:null,choices:t}]);a=e.targets[lodash.indexOf(t,s.target)]}else 1===e.targets.length&&(a=lodash.first(e.targets))}const r=Buffer.from(`${a.api_key}:${a.password}`);return a.auth=`Basic ${r.toString("base64")}`,a},Ignore=function(e,t={base:/[\/\\]\./,count:0,files:null,log:null}){return e.ignore&&e.forceIgnore&&(t.count=e.ignore.length,t.log=lodash.join(e.ignore,chalk`\n\t {whiteBright - }`),e.ignore.push(t.base),t.files=e.ignore),{settings:e,ignored:t}};const{url:url$1}=Request_1;fs$1.mkdirp=mkdirp,bluebird.promisifyAll(fs$1);var Download=async function(e){let t=0;const a=await Config(),s=await Target(a,e);e.file||Object.assign(e,a);const r=process.cwd(),i=e.dir||"theme",n=lodash.first(e._)?i:null,{settings:o}=Ignore(e);try{const e=`${url$1(s)}/admin/themes/${s.theme_id}/assets.json`,{data:a}=await axios.get(e);let{assets:l}=a;lodash.has(l,"ignore")&&o.ignore.length>0&&(l=lodash.reject(l,e=>o.ignore.includes(e))),n&&(l=lodash.filter(l,e=>n.test(e.key))),await bluebird.map(l,async({attachment:e,value:a,key:s})=>{let n=null;e?n=Buffer.from(e,"base64"):a&&(n=Buffer.from(a,"utf8")),await fs$1.mkdirpAsync(path.join(r,i,path.dirname(s))),await fs$1.writeFileAsync(path.join(r,i,s),n),t+=1,await fancyLog(chalk`{green Downloaded} '{green ${s}} to {green ${i}}'`)},{concurrency:o.concurrency})}catch(e){console.error(e)}return`Downloaded ${t} files.`};bluebird.promisifyAll(fs$1);const{Request:Request$1}=Request_1;var Upload=async function(e){let t=0;const a=await Config(),s=await Target(a,e);e.file||Object.assign(e,a);const r=e.dir||"theme",i=new RegExp(`^${r}/${lodash.first(e._)}`),{settings:n}=Ignore(e),o=lodash.first(n._)?i:null;let l=glob.sync(`${r}/**/*`,{nodir:!0});return lodash.has(n,"ignore")&&n.ignore.length>0&&(l=lodash.reject(l,e=>n.ignore.includes(e))),o&&(l=lodash.filter(l,e=>o.test(e))),l=l.map(e=>{const t=e.split(path.sep),a=lodash.drop(t,lodash.lastIndexOf(t,r)+1).join(path.sep);return{key:a,name:path.basename(a),path:e}}),await bluebird.map(l,async e=>{const a=await fs$1.readFileAsync(e.path);await Request$1(s,{method:"put",url:`/admin/themes/${s.theme_id}/assets.json`,data:{asset:{key:e.key,attachment:a.toString("base64")}}}),t+=1,await fancyLog(chalk`{green Uploaded} '{green ${e.key}}'`)},{concurrency:n.concurrency}),`Uploaded ${t} files.`};const{Request:Request$2}=Request_1;var Watch=async function(e,t){const a=await Config(),s=await Target(a,e);e.file||Object.assign(e,a);const r=e.dir||"theme",i=new RegExp(`^${r}`),{settings:n,ignored:o}=Ignore(e);chokidar.watch(`./${r}/`,{ignored:lodash.isNull(o.files)?o.base:o.files,persistent:!0,ignoreInitial:!0,usePolling:!0,interval:100,binaryInterval:100,cwd:process.cwd()}).on("all",async(e,a)=>{try{const o=a.split(path.sep),l=lodash.drop(o,lodash.lastIndexOf(o,r)+1).join(path.sep);if(a.match(/^\..*$/)||!a.match(i))return fancyLog(chalk`{red Issue in match "/^\..*$/" at: ${a}}"`);if(a.match(/[()]/))return fancyLog(chalk`{red Filename cannot contain parentheses at: "${a}"`);if(lodash.has(n,"ignore")&&n.ignore.length>0&&anymatch(n.ignore,a))return fancyLog(chalk`{gray Ignoring} '{gray ${a}}'`);if(["add","change"].includes(e)){const e=await fs$1.readFileAsync(a);await Request$2(s,{method:"put",url:`/admin/themes/${s.theme_id}/assets.json`,data:{asset:{key:l.split(path.sep).join("/"),attachment:e.toString("base64")}}}),fancyLog(chalk`{green Uploaded} '{green ${a}}'`),"function"==typeof t&&t.apply({file:path.parse(a)})}else"unlink"===e&&(await Request$2(s,{method:"delete",url:`/admin/themes/${s.theme_id}/assets.json?asset[key]=${l.split(path.sep).join("/")}`}),fancyLog(chalk`{green Deleted} '{green ${a}}'`))}catch(e){let t="";t=e.stack?e.stack:chalk`{red Error} {dim in } {red ${e.message}}
        \n   {red ${e.data}}
        `,fancyLog(t)}});let l=chalk`  Target: {green ${s.target_name}}\n`+chalk`   Store: {green https://${s.domain}.myshopify.com}\n`+chalk`Watching: {green ${r}/**/**}`;lodash.isNull(o.log)||(l+=chalk`\nIgnoring: {yellow ${o.count}} Files\n`,l+=chalk`\t {whiteBright -} {yellow ${o.log}}`),await fancyLog(chalk.whiteBright.bold("Shopify Sync\n")+boxen(l,{padding:0,borderColor:"gray",dimBorder:!0,borderStyle:{topLeft:" ",topRight:" ",bottomLeft:" ",bottomRight:" ",horizontal:"-",vertical:" "}}))};const HELPTEXT=chalk`
  {green.bold Shopify Sync} – {bold Commands}
  {gray ---------------------------------------------------------}

  {bold Commands:}
    sync watch [options] – {gray.italic Watch theme folder}
    sync upload [options] [filter] – {gray.italic Upload theme files}
    sync download [options] [filter] – {gray.italic Download theme files}

  {bold Options:}
    --target=[target name] – {gray.italic Explicitly select theme target}
    --filter=[filename] – {gray.italic Only transfer files matching specified filter}
`;var Commands=async function(e,t){let a,s;try{e._?(a=lodash.first(e._),e._=e._.slice(1),e.file=!1):(a=e.resource,e.file=!0),"watch"===a?s=await Watch(e,t):"upload"===a?s=await Upload(e,t):"download"===a?s=await Download(e,t):process.stdout.write(HELPTEXT),s&&process.stdout.write(s)}catch(e){let t=null;e.stack&&(t=e.stack),Log(lodash.isNull(t)?e:t,"red")}return s};commonjsGlobal.Promise=bluebird;var Entry=function(e,t,a){if(!e)return fancyLog(chalk`{red Error! The {bold resource} option is missing}!`);if(!t.target)return fancyLog(chalk`{red Error! Please define a {bold theme target}!}`);const s=Object.assign({},{resource:e},{target:"",concurrency:20,dir:"theme",forceIgnore:!1,ignore:[]},t);return Commands(s,a)};module.exports=Entry;
